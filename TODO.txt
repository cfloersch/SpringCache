Notes
   If we have Cache-Control with both a no-cache and a max-age, we will use no-cache and
   ignore max-age. Thus max-age = 0

   If both Cache-Control: max-age=X and Expires are defined we will use the max-age and ignore
   Expires.

   When ETag and Last-Modified headers are present we will use ETag as the validator.

   We will need to have a rule which makes any entity that does NOT include either a Last-Modified
   or an ETag uncachable unless there is a max-age (expires). Since no validation can occur we will
   evict that item immediately once max-age is reached. (no-cache for example could not be cached)

   If Cache-Control: max-age=X is not included but an Expires headers is present we will compute
   the max-age based on Expires - Date.

   If no-cache is specified or max-age cannot be computed we will treat the cache item as stale
   immediately. Any subsequent query would have to be conditional. If this is the case and I do
   not have a Last-Modified nor ETag header then it is uncachable.




Cache Versions
  When I have an entity that defines a Last-Modified but does not define an ETag I will only ever
  have a single cache item for that key. When I execute a conditional If-Modified-Since validation
  check and I get back 200 OK instead of 304 Not Modified I will replace the existing cache item.

  If I have an entity that has both an ETag and a Last-Modified I will always use the ETag.

  When using ETag the secondary discriminator will be the public, private, unknown status. We can
  only ever have one PUBLIC variant. All subsequent revalidations should overwrite any previous
  public entity. We can keep N number of unknown and private cache items. However, we should
  never serve stale-on-error if the item is private.

  A given cache key may contain multiple CacheItems if (and only if) we are using ETag. In this
  case it is acceptable to have one and only one PUBLIC item. Any conditional updates that are
  received as PUBLIC should overwrite any previous PUBLIC entity.

  We can hold multiple unknown or private items. However, we should ignore any max-age on these
  items? This would result in them always being revalidated?




Actual Cache
   Ideally the actual cache would be a ConcurrentMultiMap or some sort. The key would be the URL
   of the cache item. The value would be a set of one or more CacheItem instances. The CacheItem
   instances would be unique based on their ETag. If there is no ETag then there could be only
   one item. If I add CacheItem with no ETag all existing items are evicted. If I add an item
   with an ETag and there is an existing item with no ETag it is evicted. If I add an item with
   an ETag any existing item with the same ETag is evicted.

   The CacheItem stores all of the data such as ETag, LastModified, Expires, Created, Public,
   Private, or Unknown and whether the entity requires re-validation. (What to do if max-age and
   must-revalidate are both present?) We should also store the headers?

   The cache should apply a weight to each cache item that should be the size of the cached
   entity. The cache should keep track of the total accumulated weight and begin evictions
   when we exceed a defined maximum.

   When we evict cache items we will evict the least recently used items first until we free
   up sufficient weight to allow the newly added item to be added. As we evict each item we
   delete its underlying cache file.

   Items are not added to the cache until the underlying cache file has been populated. This
   will be the last step of a CachingHttpResponse when the body has been read successfully.




Concurrency
   What sort of attempt should I make at managing concurrency. For example if two threads
   both request /someresource at the same time both will find that it is not cached. They
   will both proceed to download the resource from the origin at which point they will
   both attempt to persist the result in the cache. Presumably in most cases the entity
   will be the same. So the one that gets added last will remove all of the items added
   before it (as presumably they have the same ETag).

   This is not ideal but there is nothing wrong with it either. This race to fill the
   cache is known as the stampede. If we somehow locked on the URI would could prevent
   this but to what end and with how much complexity?



Additional & Extension Directives

   immutable               (probably not)
      No conditional revalidation will be triggered even if the user explicitly refreshes
      a page. The immutable directive tells the client that the response body will not
      change over time, therefore, there is no need to check for updates as long as it
      is unexpired. Entities with this headers should ALWAYS be served from cache with
      out ever going to the origin server.

   stale-while-revalidate  (probably not)
      The stale-while-revalidate directive allows for a stale asset to be served while it
      is revalidated in the background.

   stale-if-error          (probably so)
      The stale-if-error directive is very similar to the stale-while-revalidate
      directive in that it serves stale content when the max-age expires. However, the
      stale-if-error only returns stale content if the origin server returns an error
      code (e.g. 500, 502, 503, or 504) when the cache attempts to revalidate the asset.

      We should never return a stale-if-error cache item if it is also marked private.

   no-transform            (probably not)
      The no-transform directive tells any intermediary such as a proxy or cache server
      to not make any modifications whatsoever to the original asset. The Content-Encoding,
      Content-Range, and Content-Type headers must remain unchanged. This can occur if a
      non-transparent proxy decides to make modifications to assets in order to save space.
      However, this can cause serious problems in the event that the asset must remain
      identical to the original entity-body although must also pass through the proxy.




Cache
   Cache-Control: private
      Means only private caches may cache this data
   Cache-Control: public
      Means any cache (including shared caches) may cache this data
   Cache-Control: must-revalidate
      Means the caching server must revalidate once its cache has become stale

   The current Spring system does not include any sort of cache control headers (other than ETag)
   and the Last-Modified header I am adding for entities.

   Expires and Pragma are really legacy headers useful mostly for preventing caching.

   https://tools.ietf.org/html/rfc7234
   https://www.keycdn.com/blog/http-cache-headers




Http Preconditions
   For those headers which support * it owuld appear it is a list of quoted etags separated by comma OR a
   * but not both.

       If-Match: "xyzzy"
       If-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
       If-Match: *

   Cache Control (GET/HEAD)
      If-None-Match
         Supports list or wildcard
         Takes precedence over If-Modified-Since
         Used primarily for cache control to have content returned if it has been changed since any of the etags were obtained
         Response should include the etag of the entity that matched
         https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26
      If-Modified-Since
         Supports single date..
         Used primarily for cache control to have content returned if it has been changed since the specified date
         https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25




Java 5 Introduced a Basic Caching API

   The core of this API focused around a cache controller caller ResponseCache
      https://docs.oracle.com/javase/9/docs/api/java/net/ResponseCache.html

   An attempt to pull from cache would return a CacheResponse if the item existed in Cache and the
   request headers allowed retrieving from cache. Otherwise, it would return null. In order to
   impl conditional caching I need to have a subtype which makes it clear it is to be used only
   on a 304 - Not Modified response
      https://docs.oracle.com/javase/9/docs/api/java/net/CacheResponse.html

   An attempt to store something into cache would return a CacheRequest which acted liked a proxy to
   the actual request.
      https://docs.oracle.com/javase/9/docs/api/java/net/CacheRequest.html




Underlying cache itself
   I would like to have a memory cache with a disk backing store. In this model if our total memory
   usage exceeds a certain threshold or the cached item exceeds a certain age it will be passivated
   to disk only. I would also like to have a configurable setting that allows the user to define the
   max cache size which would look at each cache item and cache only to disk items that exceed that
   size.

   The cache will need to have a thread that periodically goes through and cleans up the cache
   evicting items that have exceeded their expiration (based on the must-revalidate rules). I would
   love to implement the stale-on-error and Stale-While-Revalidate headers as well if I have time.

   max-expires is a configurable setting that defines how long an item can be served from the
   cache without checking if max-age and must-revaliate are not specified.

   The user can configure the cache as private or public. If marked as public it will cache in a
   fashion similar to a proxy cache otherwise it will cache like a user-agent.

   Probably need to have a method to configure max-stale, max-age (when undefined), etc. Also
   probably need to have a max-total-size where the cache (disk consumption) does not exceed this
   value and where Least Recently Used cache items are evicted.

   The entities themselves are written to disk. The headers are written to?? The rest of the meta
   data is stored in a database so that I can fetch ordered by oldest, least recently used, url,
   etc. The ability to mark the item with cache date, expire date, and last access date would be
   important as would the need to mark it as must-revalidate, no-transform?




    



